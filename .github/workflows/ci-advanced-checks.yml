name: Advanced CI/CD Checks

# Trigger on all important events
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Job 1: YAML Validation
  yaml-validation:
    name: Validate YAML Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install yamllint
        run: pip install yamllint
      
      - name: Validate all YAML files
        run: |
          echo "Validating YAML files..."
          find . -name '*.yml' -o -name '*.yaml' | while read file; do
            echo "Checking: $file"
            yamllint "$file" || exit 1
          done
      
      - name: Validate GitHub Actions workflows
        uses: docker://rhysd/actionlint:latest
        with:
          args: -color

  # Job 2: Python Code Quality
  code-quality:
    name: Python Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8 black isort mypy bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run Pylint
        run: |
          pylint **/*.py --exit-zero --output-format=text --reports=y || true
      
      - name: Run Flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Check code formatting with Black
        run: |
          black --check . || echo "Run 'black .' to fix formatting"
      
      - name: Check import sorting with isort
        run: |
          isort --check-only . || echo "Run 'isort .' to fix imports"
      
      - name: Run type checking with mypy
        run: |
          mypy . --ignore-missing-imports || true

  # Job 3: Security Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run Bandit security scan
        run: |
          bandit -r . -ll || true
      
      - name: Check dependencies for vulnerabilities
        run: |
          safety check || true
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'

  # Job 4: Dependency Review
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  # Job 5: Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run tests with coverage
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html || echo "No tests found"
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 6: Config File Validation
  config-validation:
    name: Validate Config Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate JSON files
        run: |
          echo "Validating JSON files..."
          find . -name '*.json' | while read file; do
            echo "Checking: $file"
            python -m json.tool "$file" > /dev/null || exit 1
          done
      
      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # Job 7: Build and Validate
  build:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [yaml-validation, code-quality, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Verify imports and syntax
        run: |
          python -m py_compile **/*.py || true
      
      - name: Check for TODO and FIXME comments
        run: |
          echo "Checking for TODO/FIXME comments..."
          grep -r "TODO\|FIXME" . --exclude-dir=.git --exclude-dir=venv || echo "No TODO/FIXME found"

  # Job 8: Documentation Check
  docs-check:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for README
        run: |
          if [ ! -f README.md ]; then
            echo "ERROR: README.md not found!"
            exit 1
          fi
          echo "README.md exists ✓"
      
      - name: Validate Markdown files
        uses: DavidAnson/markdownlint-cli2-action@v16
        with:
          globs: '**/*.md'
          config: '{}'

  # Job 9: Final Status Report
  status-report:
    name: CI/CD Status Report
    runs-on: ubuntu-latest
    needs: [yaml-validation, code-quality, security-scan, test, config-validation, build, docs-check]
    if: always()
    steps:
      - name: Generate Status Report
        run: |
          echo "=== CI/CD Pipeline Status Report ==="
          echo "✅ YAML Validation: Completed"
          echo "✅ Code Quality Checks: Completed"
          echo "✅ Security Scanning: Completed"
          echo "✅ Testing: Completed"
          echo "✅ Config Validation: Completed"
          echo "✅ Build Validation: Completed"
          echo "✅ Documentation Check: Completed"
          echo ""
          echo "All CI/CD checks have been executed successfully!"
          echo "Review individual job results above for any warnings or issues."
